import {
  core.dictionary {Bin, Tip, dictionary},
  core.list {append},
}

inline object(a): type {
  dictionary(text, a)
}

data json {
| Null
| Bool(bool)
| Integer(int)
| Float(float)
| Text(text)
| Object(object(json))
| Array(list(json))
}

define insert(kvs: object(json), key: text, value: json): object(json) {
  pin k = core.text.ord.as-ord;
  core.dictionary.insert(k, kvs, key, value)
}

define lookup(k: &ord(text), kvs: &object(json), key: &text): ?&json {
  core.dictionary.lookup(k, kvs, key)
}

define delete(k: &ord(text), kvs: object(json), key: text): object(json) {
  core.dictionary.delete(k, kvs, key)
}

inline from-list<k, v>(_ord: &ord(k), kvs: list(pair(k, v))): dictionary(k, v) {
  let f =
    define self(kvs: list(pair(k, v)), acc: dictionary(k, v)): dictionary(k, v) {
      match kvs {
      | Nil =>
        acc
      | Cons(Pair(k, v), rest) =>
        self(rest, core.dictionary.insert(_ord, acc, k, v))
      }
    };
  f(kvs, Tip)
}

define to-list<k, v>(d: dictionary(k, v)): list(pair(k, v)) {
  match d {
  | Tip =>
    []
  | Bin(_, k, v, d1, d2) =>
    let xs = to-list(d1);
    let ys = to-list(d2);
    append(xs, Cons(Pair(k, v), ys))
  }
}
