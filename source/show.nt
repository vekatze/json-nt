import {
  core.list {for-each, intercalate},
  core.list.show,
  core.show {Show, show},
  core.text {join},
  core.text.show,
  this.data {Array, Bool, Float, Integer, Null, Object, Text, json, object, to-list-ordered},
  this.error {report},
  this.parse {parse-json},
  this.text.show {_show-json-text},
  static {sample-json},
}

nominal {
  show-json(j: json): text,
}

constant as-show: show(json) {
  Show of {show = show-json}
}

constant list-json: show(list(json)) {
  core.list.show.as-show(as-show)
}

constant showable-object: show(object(json)) {
  Show of {
    show = {
      function (kvs) {
        let kvs = to-list-ordered(kvs) in
        let kvs' =
          for-each(kvs, function (kv) {
            let Pair(k, v) = kv in
            let k' = _show-json-text(k) in
            let v' = show-json(v) in
            join([k', *": ", v'])
          })
        in
        join(Cons(*"{", append(intercalate(*", ", kvs'), [*"}"])))
      }
    },
  }
}

define _show-object(kvs: object(json)): list(text) {
  let kvs = to-list-ordered(kvs) in
  let kvs' =
    for-each(kvs, function (kv) {
      let Pair(k, v) = kv in
      let k' = core.text.show.as-show::show(k) in
      let v' = show-json(v) in
      join([k', *": ", v'])
    })
  in
  Cons(*"{", append(intercalate(*", ", kvs'), [*"}"]))
}

define show-json(j: json): text {
  match j {
  | Null =>
    *"null"
  | Bool(b) =>
    if b {
      *"true"
    } else {
      *"false"
    }
  | Integer(i) =>
    core.int.show.as-show::show(i)
  | Float(x) =>
    core.float.show.as-show::show(x)
  | Text(x) =>
    _show-json-text(x)
  | Object(kvs) =>
    showable-object::show(kvs)
  | Array(xs) =>
    list-json::show(xs)
  }
}

foreign {
  snprintf(pointer, int, pointer): int,
  sprintf(pointer, pointer): int,
}

define zen(): unit {
  match parse-json(*include-text(sample-json)) {
  | Right(j) =>
    printf("{}\n", [show-json(j)])
  | Left(e) =>
    printf("{}\n", [report(e)])
  }
}
