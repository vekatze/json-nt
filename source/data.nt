import {
  core.dict {Bin, Tip, dict},
  core.text.loset,
}

constant _textdict: core.dict.trope(text) {
  core.dict.from-loset(core.text.loset.as-loset)
}

inline object(a): type {
  dict(text, a)
}

data json {
| Null
| Bool(bool)
| Integer(int)
| Float(float)
| Text(text)
| Object(object(json))
| Array(list(json))
}

define _dict-to-list<k, v>(d: dict(k, v)): list(pair(k, v)) {
  match d {
  | Tip =>
    []
  | Bin(_, k, v, d1, d2) =>
    let xs = _dict-to-list(d1) in
    let ys = _dict-to-list(d2) in
    Cons(Pair(k, v), append(xs, ys))
  }
}

define _dict-size<k, v>(d: &dict(k, v)): int {
  case d {
  | Tip =>
    0
  | Bin(_, _, _, d1, d2) =>
    add-int(1, add-int(_dict-size(d1), _dict-size(d2)))
  }
}

define lookup(key: &text, kvs: &object(json)): ?&json {
  _textdict::lookup(key, kvs)
}
