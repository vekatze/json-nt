import {
  core.dictionary {Trope, dictionary},
}

inline _textdict: core.dictionary.trope(text) {
  core.dictionary.from-ord(core.text.ord.as-ord)
}

inline object(a): type {
  dictionary(text, a)
}

data json {
| Null
| Bool(bool)
| Integer(int)
| Float(float)
| Text(text)
| Object(object(json))
| Array(list(json))
}

define insert(kvs: object(json), key: text, value: json): object(json) {
  let Trope of {insert} = _textdict in
  insert(kvs, key, value)
}

define lookup(kvs: &object(json), key: &text): ?&json {
  let Trope of {lookup} = _textdict in
  lookup(kvs, key)
}

define delete(kvs: object(json), key: text): object(json) {
  let Trope of {delete} = _textdict in
  delete(kvs, key)
}
