import {
  core.dictionary {dictionary},
}

constant _textdict: core.dictionary.trope(text) {
  core.dictionary.from-ord(core.text.ord.as-ord)
}

inline object(a): type {
  dictionary(text, a)
}

data json {
| Null
| Bool(bool)
| Integer(int)
| Float(float)
| Text(text)
| Object(object(json))
| Array(list(json))
}

define insert(key: text, value: json, kvs: object(json)): object(json) {
  _textdict::insert(key, value, kvs)
}

define lookup(key: &text, kvs: &object(json)): ?&json {
  _textdict::lookup(key, kvs)
}

define delete(key: text, kvs: object(json)): object(json) {
  _textdict::delete(key, kvs)
}
