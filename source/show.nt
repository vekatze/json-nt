import {
  core.float.show {show-float},
  core.int.show {show-int},
  core.list {append, for-each, intercalate},
  core.list.show,
  core.show {Show, show},
  core.text {join},
  core.text.show,
  this.data {Array, Bool, Float, Integer, Null, Object, Text, json, object, to-list},
  this.text.show {_show-json-text},
}

nominal {
  show-json(j: json): text,
}

inline as-show: show(json) {
  Show of {show := show-json}
}

inline list-json: show(list(json)) {
  core.list.show.as-show(as-show)
}

inline showable-object: show(object(json)) {
  Show of {
    show := {
      function (kvs) {
        let kvs = to-list(kvs);
        let kvs' =
          for-each(kvs, function (kv) {
            let Pair(k, v) = kv;
            let k' = _show-json-text(k);
            let v' = show-json(v);
            join([k', *": ", v'])
          });
        join(Cons(*"{", append(intercalate(kvs', *", "), [*"}"])))
      }
    },
  }
}

define _show-object(kvs: object(json)): list(text) {
  let kvs = to-list(kvs);
  let kvs' =
    for-each(kvs, function (kv) {
      let Pair(k, v) = kv;
      let k' = {
        let Show of {show} = core.text.show.as-show;
        show(k)
      };
      let v' = show-json(v);
      join([k', *": ", v'])
    });
  Cons(*"{", append(intercalate(kvs', *", "), [*"}"]))
}

define show-json(j: json): text {
  match j {
  | Null =>
    *"null"
  | Bool(b) =>
    if b {
      *"true"
    } else {
      *"false"
    }
  | Integer(i) =>
    show-int(i)
  | Float(x) =>
    show-float(x)
  | Text(x) =>
    _show-json-text(x)
  | Object(kvs) =>
    let Show of {show} = showable-object;
    show(kvs)
  | Array(xs) =>
    let Show of {show} = list-json;
    show(xs)
  }
}
