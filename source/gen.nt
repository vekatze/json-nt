import {
  core.list {for-each},
  core.random {random-in-range-int},
  noa.move.gen.bool {bool-gen},
  noa.move.gen.float {float-gen},
  noa.move.gen.int {int-gen},
  noa.move.gen.list {list-gen},
  noa.move.gen.pair {pair-gen},
  noa.move.gen.text {text-gen},
  noa.rule.gen {Gen, gen},
  this.data {Array, Bool, Float, Integer, Null, Object, Text, from-list, json, to-list},
  this.show {as-show},
}

nominal {
  json-gen: gen(json),
}

define json-list-gen(): gen(list(json)) {
  list-gen(json-gen)
}

define kvs-list-gen(): gen(list(pair(text, json))) {
  list-gen(pair-gen(text-gen, json-gen))
}

inline json-gen: gen(json) {
  Gen of {
    generate := {
      function (size: int) {
        let dice = random-in-range-int(0, 6);
        if eq-int(dice, 0) {
          Null
        } else-if eq-int(dice, 1) {
          let Gen of {generate} = bool-gen;
          Bool(generate(size))
        } else-if eq-int(dice, 2) {
          let Gen of {generate} = int-gen;
          Integer(generate(size))
        } else-if eq-int(dice, 3) {
          let Gen of {generate} = float-gen;
          Float(generate(size))
        } else-if eq-int(dice, 4) {
          let Gen of {generate} = text-gen;
          Text(generate(size))
        } else-if eq-int(dice, 5) {
          let size = div-int(size, 2);
          let Gen of {generate} = kvs-list-gen();
          pin k = core.text.ord.as-ord;
          Object(from-list(k, generate(size)))
        } else {
          let size = div-int(size, 2);
          let Gen of {generate} = json-list-gen();
          Array(generate(size))
        }
      }
    },
    shrink := {
      function (j: json) {
        match j {
        | Null =>
          List[]
        | Bool(b) =>
          let Gen of {shrink} = bool-gen;
          for-each(shrink(b), Bool)
        | Integer(x) =>
          let Gen of {shrink} = int-gen;
          for-each(shrink(x), Integer)
        | Float(x) =>
          let Gen of {shrink} = float-gen;
          for-each(shrink(x), Float)
        | Text(x) =>
          let Gen of {shrink} = text-gen;
          for-each(shrink(x), Text)
        | Object(kvs) =>
          let Gen of {shrink} = kvs-list-gen();
          pin k = core.text.ord.as-ord;
          for-each(shrink(to-list(kvs)), function (kvs) {
            Object(from-list(k, kvs))
          })
        | Array(xs) =>
          let Gen of {shrink} = json-list-gen();
          for-each(shrink(xs), Array)
        }
      }
    },
    viewer := as-show,
  }
}
