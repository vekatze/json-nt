import {
  core.c-string {to-c-string},
  core.external {malloc},
  core.list {append},
  core.memory {store-int},
  core.pointer {pointer, shift},
  core.rune,
  core.text {_get-rune, _slice-N, format, join, text-byte-length},
  core.word,
}

foreign {
  snprintf(pointer, int, pointer): int,
  sprintf(pointer, pointer): int,
}

define _show-hex(x: int32): text {
  pin fmt = to-c-string("%02x") in
  let zero: int = 0 in
  let size: int = magic external snprintf(zero, zero, fmt)(x: int) in
  let ptr = malloc(add-int(size, add-int(1, mul-int(core.word.size, 2)))) in
  store-int(0, ptr);
  store-int(size, shift(ptr, core.word.size));
  let buffer = shift(ptr, mul-int(core.word.size, 2)) in
  let _: int = magic external sprintf(buffer, fmt)(x: int) in
  magic cast(pointer, text, ptr)
}

define _quote-text(haystack: &text): list(text) {
  let len = text-byte-length(haystack) in
  let f =
    define !loop(pivot: int, cursor: int): list(text) {
      let index = add-int(pivot, cursor) in
      if ge-int(index, len) {
        [_slice-N(haystack, pivot, cursor)]
      } else {
        let f =
          function (escaped-text: text) {
            let piece = _slice-N(haystack, pivot, cursor) in
            let rest = !loop(add-int(index, 1), 0) in
            Cons(piece, Cons(escaped-text, rest))
          }
        in
        let r = _get-rune(haystack, index) in
        match r {
        | `\u{8}` =>
          f(*"\\b")
        | `\u{9}` =>
          f(*"\\t")
        | `\u{a}` =>
          f(*"\\n")
        | `\u{c}` =>
          f(*"\\f")
        | `\u{d}` =>
          f(*"\\r")
        | `\u{22}` =>
          f(*"\\\"")
        | `\u{5c}` =>
          f(*"\\\\")
        | _ =>
          if le-rune(r, `\u{1f}`) {
            f(format("\\u00{}", [_show-hex(magic cast(rune, int32, r))]))
          } else {
            !loop(pivot, add-int(cursor, core.rune.size(r)))
          }
        }
      }
    }
  in
  f(0, 0)
}

define _show-json-text(t: text): text {
  pin t = t in
  join(Cons(*"\"", append(_quote-text(t), [*"\""])))
}

define _show-json-text-without-quote(t: &text): text {
  join(_quote-text(t))
}
