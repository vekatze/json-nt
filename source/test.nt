import {
  noa.move.check {check},
  noa.move.gen.text {text-gen},
  noa.move.make-noa-kit {make-default-noa-kit},
  this.data {json},
  this.gen {json-gen},
  this.parse {parse-json},
  this.show {show-json},
  this.text.parse {_parse-json-text},
  this.text.show {_show-json-text-without-quote},
  zonk.move.make-zonk-kit {make-zonk-kit},
}

define main(): unit {
  pin k = make-default-noa-kit() in
  check(
    k,
    "∀ (t: text). quote(parse(quote(t))) == quote(t)",
    text-gen,
    function (t: text) {
      pin t = t in
      pin t' = _show-json-text-without-quote(t) in
      match _parse-json-text(t') {
      | Left(_) =>
        False
      | Right(t'') =>
        pin t'' = t'' in
        pin t3 = _show-json-text-without-quote(t'') in
        eq-text(t', t3)
      }
    },
  );
  check(
    k,
    "∀ (j: json). show(parse(show(j))) == show(j)",
    json-gen,
    function (j: json) {
      pin json-txt = show-json(j) in
      pin k = make-zonk-kit(*json-txt) in
      match parse-json(k) {
      | Right(j) =>
        pin new-json-txt = show-json(j) in
        eq-text(json-txt, new-json-txt)
      | Left(_) =>
        False
      }
    },
  )
}

define zen(): unit {
  pin k = make-zonk-kit(*" {\"key\" : 1234}") in
  match parse-json(k) {
  | Right(j) =>
    printf("ok: {}\n", [show-json(j)])
  | Left(_) =>
    print("unreachable")
  }
}
