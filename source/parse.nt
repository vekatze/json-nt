import {
  core.dictionary,
  core.float.parse {parse-float},
  core.function {compose},
  core.int.parse {parse-int},
  core.list {reverse},
  core.text {join, singleton},
  this.data {Array, Bool, Float, Integer, Null, Object, Text, insert, json, object},
  this.text.parse {_parse-json-text},
  zonk.move.make-parse-error {make-parse-error},
  zonk.move.parse {
    any-rune,
    branch,
    chunk,
    drop-while,
    end-of-input,
    optional,
    parsed,
    report-unexpected-input,
    take-while,
    zonk,
  },
  zonk.rule.error {parse-error},
  zonk.rule.zonk-kit {zonk-kit},
}

define _is-space(r: rune): bool {
  if eq-rune(r, ` `) {
    True
  } else-if ule-int32(sub-int32(magic cast(rune, int32, r), 0x9), 0x4) {
    True
  } else {
    False
  }
}

inline _skip-space: zonk(unit) {
  drop-while(_is-space)
}

inline _token(t: &text): zonk(unit) {
  function (k) {
    try _ = chunk(t)(k);
    try _ = _skip-space(k);
    Right(Unit)
  }
}

inline _parse-null: zonk(json) {
  function (k) {
    try _ = _token("null")(k);
    Right(Null)
  }
}

inline _parse-bool: zonk(json) {
  branch(
    function (k) {
      try _ = _token("true")(k);
      Right(Bool(True))
    },
    function (k) {
      try _ = _token("false")(k);
      Right(Bool(False))
    },
  )
}

define _any-number(r: rune): bool {
  let b1 = le-rune(`0`, r);
  let b2 = le-rune(r, `9`);
  and(b1, b2)
}

define _is-integer-rune(r: rune): bool {
  or(
    _any-number(r),
    or(
      eq-rune(r, `+`),
      eq-rune(r, `-`),
    ),
  )
}

define _is-float-rune(r: rune): bool {
  or(
    _any-number(r),
    or(
      eq-rune(r, `.`),
      or(
        eq-rune(r, `e`),
        or(
          eq-rune(r, `E`),
          or(
            eq-rune(r, `+`),
            eq-rune(r, `-`),
          ),
        ),
      ),
    ),
  )
}

inline _parse-number: zonk(json) {
  // RFC8259:
  // > This specification allows implementations to set limits on the range
  // > and precision of floats accepted.
  function (k) {
    try num-text = take-while(_is-float-rune)(k);
    try _ = _skip-space(k);
    let is-integer on num-text = core.text.all(num-text, _is-integer-rune);
    if is-integer {
      let num-or-none on num-text = parse-int(num-text);
      let _ = num-text;
      match num-or-none {
      | Right(num) =>
        Right(Integer(num))
      | Left(_) =>
        report-unexpected-input("number")
      }
    } else {
      let num-or-none on num-text = parse-float(num-text);
      let _ = num-text;
      match num-or-none {
      | Right(num) =>
        Right(Float(num))
      | Left(_) =>
        report-unexpected-input("number")
      }
    }
  }
}

define _special-text(r: rune): bool {
  let b1 = eq-rune(r, `"`);
  let b2 = eq-rune(r, `\\`);
  or(b1, b2)
}

define _parse-text-loop(acc: list(text)): zonk(text) {
  function (k) {
    try piece = take-while(compose(not, _special-text))(k);
    try backslash-or-none = optional(chunk("\\"))(k);
    match backslash-or-none {
    | Right(_) =>
      try r = any-rune(k);
      _parse-text-loop(Cons(singleton(r), Cons(*"\\", Cons(piece, acc))))(k)
    | Left(_) =>
      try _ = _token("\"")(k);
      Right(join(core.list.reverse(Cons(piece, acc))))
    }
  }
}

inline _parse-text-inner(): zonk(text) {
  function (k) {
    try _ = chunk("\"")(k);
    try t = _parse-text-loop([])(k);
    Right(t)
  }
}

inline _parse-text: zonk(json) {
  function (k) {
    try t = _parse-text-inner()(k);
    let unquoted-text-or-none on t = _parse-json-text(t);
    let _ = t;
    match unquoted-text-or-none {
    | Right(t') =>
      Right(Text(t'))
    | Left(_) =>
      report-unexpected-input("JSON string")
    }
  }
}

nominal {
  _parse-json: zonk(json),
}

inline _parse-object-item(kvs: object(json)): zonk(object(json)) {
  function (k) {
    try key = _parse-text-inner()(k);
    try _ = _token(":")(k);
    try value = _parse-json(k);
    let unquoted-key-or-none on key = _parse-json-text(key);
    let _ = key;
    match unquoted-key-or-none {
    | Right(key') =>
      Right(insert(kvs, key', value))
    | Left(_) =>
      report-unexpected-input("JSON key")
    }
  }
}

define _parse-object-inner(k: &zonk-kit, acc: object(json)): parsed(json) {
  try acc' = _parse-object-item(acc)(k);
  try comma-or-none = optional(_token(","))(k);
  match comma-or-none {
  | Right(_) =>
    _parse-object-inner(k, acc')
  | Left(_) =>
    Right(Object(acc'))
  }
}

inline _parse-object: zonk(json) {
  function (k) {
    try _ = _token("{")(k);
    try kvs =
      branch(
        function (k) {
          _parse-object-inner(k, core.dictionary.empty)
        },
        function (_) {
          Right(Object(core.dictionary.empty))
        },
      )(k);
    try _ = _token("}")(k);
    Right(kvs)
  }
}

define _parse-array-inner(k: &zonk-kit, acc: list(json)): parsed(json) {
  try v = _parse-json(k);
  try comma-or-none = optional(_token(","))(k);
  match comma-or-none {
  | Right(_) =>
    _parse-array-inner(k, Cons(v, acc))
  | Left(_) =>
    Right(Array(reverse(Cons(v, acc))))
  }
}

inline _parse-array: zonk(json) {
  function (k) {
    try _ = _token("[")(k);
    try vs =
      branch(
        function (k) {
          _parse-array-inner(k, [])
        },
        function (_) {
          Right(Array([]))
        },
      )(k);
    try _ = _token("]")(k);
    Right(vs)
  }
}

inline _parse-json: zonk(json) {
  branch(
    _parse-null,
    branch(
      _parse-bool,
      branch(
        _parse-object,
        branch(
          _parse-text,
          branch(
            _parse-number,
            _parse-array,
          ),
        ),
      ),
    ),
  )
}

define parse-json(k: &zonk-kit): either(parse-error, json) {
  let p: zonk(json) =
    function (k) {
      try _ = _skip-space(k);
      try json = _parse-json(k);
      try _ = end-of-input(k);
      Right(json)
    };
  match p(k) {
  | Right(v) =>
    Right(v)
  | Left(e) =>
    Left(make-parse-error(k, e))
  }
}
